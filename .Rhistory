mean_tilskuer_scoring = round((mean_tilskuere / overall_mean_tilskuere), 1)
)
View(samlet_data_flot)
samlet_data_flot <- samlet_data |>
filter(
kampstart >= tid & kampstart - hours(6) <= tid
) |>
group_by(dato) |>
mutate(
mean_temp_6h = round(mean(temp_mean_past1h), 1),
mean_precip_6h = round(mean(precip_past1h), 1),
mean_precip_dur_6h = round(mean(precip_dur_past1h), 1),
mean_wind_speed_6h = round(mean(wind_speed_past1h), 1),
dag_type = ifelse(ugedag %in% c("lørdag", "søndag"), "Weekend", "Hverdag"),
mean_tilskuer_scoring = round((mean_tilskuere / overall_mean_tilskuere), 1)
) |>
slice_head() |>
ungroup() |>
select(dato,
kampstart,
ugedag,
dag_type,
runde,
ude,
mean_spild,
sidste_spild,
mean_afhentningsgrad,
mean_tilskuere,
sidste_tilskuer_antal,
mean_tilskuer_scoring,
mean_temp_6h,
mean_precip_6h,
mean_precip_dur_6h,
mean_wind_speed_6h
) # y-variable + 15 + tidspunktskategori, lokalopgør, weekend,
View(samlet_data_flot)
testerrr <- samlet_data_flot |>
mutate(
kampstart = parse_time(sprintf("%02d:%02d", hour(kampstart), minute(kampstart)))
)
View(testerrr)
# Tilføj lokalopgør baseret på afstand, og smider det ind i en dataframe.
# Afstanden er ca. afrundet afstand taget fra google maps
afstande <- data.frame(
klub = c("FCM", "SIF", "RFC", "AGF", "AaB", "BIF", "FCK", "FCN", "ACH", "SJF", "VB", "OB", "HOB", "EFB", "LBK", "HIF", "FCV"),
afstand_km = c(40, 50, 60, 80, 90, 200, 220, 240, 230, 150, 120, 130, 65, 175, 240, 150, 95)
)
View(afstande)
samlet_data_afstand <- samlet_data_flot |>
left_join(afstande, by = c("ude" = "klub")) |>
mutate(
lokalt_opgoer = ifelse(afstand_km <= 85, 1, 0)
) |>
relocate(afstand_km, lokalt_opgoer, .after = ude)  # Flyt 'lokalt_opgoer' efter 'ude'
View(samlet_data_afstand)
# Tilføj en ny kolonne 'TidspunktKategori'
samlet_data_flot <- samlet_data_afstand |>
mutate(
TidspunktKategori = case_when(
as.numeric(substr(Kamptidspunkt, 1, 2)) < 15 ~ "Middag",
as.numeric(substr(Kamptidspunkt, 1, 2)) < 18 ~ "Eftermiddag",
TRUE ~ "Aften"
)
)
# Tilføj en ny kolonne 'TidspunktKategori'
samlet_data_flot <- samlet_data_afstand |>
mutate(
TidspunktKategori = case_when(
as.numeric(substr(kampstart, 1, 2)) < 15 ~ "Middag",
as.numeric(substr(kampstart, 1, 2)) < 18 ~ "Eftermiddag",
TRUE ~ "Aften"
)
)
View(samlet_data_flot)
samlet_data_flot <- samlet_data_flot |>
mutate(
kampstart = parse_time(sprintf("%02d:%02d", hour(kampstart), minute(kampstart)))
)
View(samlet_data_flot)
# Tilføj en ny kolonne 'TidspunktKategori'
samlet_data_flot <- samlet_data_afstand |>
mutate(
TidspunktKategori = case_when(
as.numeric(substr(kampstart, 1, 2)) < 15 ~ "Middag",
as.numeric(substr(kampstart, 1, 2)) < 18 ~ "Eftermiddag",
TRUE ~ "Aften"
)
) |>
relocate(
TidspunktKategori, .after = dag_type
)
View(samlet_data_flot)
samlet_data_flot <- samlet_data_flot |>
mutate(
kampstart = parse_time(sprintf("%02d:%02d", hour(kampstart), minute(kampstart)))
)
View(samlet_data_flot)
# Tilføj en ny kolonne 'tidspunktskategori'
samlet_data_flot <- samlet_data_afstand |>
mutate(
tidspunktskategori = case_when(
as.numeric(substr(kampstart, 1, 2)) < 15 ~ "Middag",
as.numeric(substr(kampstart, 1, 2)) < 18 ~ "Eftermiddag",
TRUE ~ "Aften"
)
) |>
relocate(
tidspunktskategori, .after = dag_type
)
samlet_data_flot <- samlet_data_flot |>
mutate(
kampstart = parse_time(sprintf("%02d:%02d", hour(kampstart), minute(kampstart)))
)
# Tilføj en ny kolonne 'tidspunktskategori'
samlet_data_flot <- samlet_data_afstand |>
mutate(
tidspunktskategori = case_when(
as.numeric(substr(kampstart, 1, 2)) < 15 ~ "Middag",
as.numeric(substr(kampstart, 1, 2)) < 18 ~ "Eftermiddag",
TRUE ~ "Aften"
)
) |>
relocate(
tidspunktskategori, .after = dag_type
)
View(samlet_data_flot)
samlet_data_flot <- samlet_data_flot |>
mutate(
kampstart = parse_time(sprintf("%02d:%02d", hour(kampstart), minute(kampstart)))
)
View(samlet_data_flot)
View(samlet_data_flot)
connection <- dbConnect(SQLite(), "vff.db")
dbListTables(connection)
# Få rettet query når alle tabeller er klar
samlet_sql_query <- dbGetQuery(connection,
"select vff.dato, vff.ugedag, vff.ude, vff.spild, vff.mean_spild, vff.sidste_spild, vff.mean_afhentningsgrad,
superstats.kampstart, superstats.runde, superstats.mean_tilskuere, superstats.sidste_tilskuer_antal,
dmi.tid, dmi.temp_mean_past1h, dmi.precip_dur_past1h, dmi.precip_past1h, dmi.wind_speed_past1h
from vff
left join superstats ON vff.dato = superstats.dato
left join dmi ON vff.dato = dmi.dato
where dmi.temp_mean_past1h is not NULL")
# Få rettet query når alle tabeller er klar
samlet_sql_query <- dbGetQuery(connection,
"select vff.dato, vff.ugedag, vff.ude, vff.antal_spild, vff.mean_spild, vff.sidste_spild, vff.mean_afhentningsgrad,
superstats.kampstart, superstats.runde, superstats.mean_tilskuere, superstats.sidste_tilskuer_antal,
dmi.tid, dmi.temp_mean_past1h, dmi.precip_dur_past1h, dmi.precip_past1h, dmi.wind_speed_past1h
from vff
left join superstats ON vff.dato = superstats.dato
left join dmi ON vff.dato = dmi.dato
where dmi.temp_mean_past1h is not NULL")
dbDisconnect(connection)
samlet_data <- as_tibble(samlet_sql_query) |>
mutate(
dato = as.Date(dato, origin = "1970-01-01"),
kampstart = hms(parse_time(kampstart)),
tid = hms(parse_time(tid))
)
overall_mean_tilskuere <- mean(superstats$tilskuere) # = 5401
samlet_data_flot <- samlet_data |>
filter(
kampstart >= tid & kampstart - hours(6) <= tid
) |>
group_by(dato) |>
mutate(
mean_temp_6h = round(mean(temp_mean_past1h), 1),
mean_precip_6h = round(mean(precip_past1h), 1),
mean_precip_dur_6h = round(mean(precip_dur_past1h), 1),
mean_wind_speed_6h = round(mean(wind_speed_past1h), 1),
dag_type = ifelse(ugedag %in% c("lørdag", "søndag"), "Weekend", "Hverdag"),
mean_tilskuer_scoring = round((mean_tilskuere / overall_mean_tilskuere), 1)
) |>
slice_head() |>
ungroup() |>
select(dato,
kampstart,
ugedag,
dag_type,
runde,
ude,
mean_spild,
sidste_spild,
mean_afhentningsgrad,
mean_tilskuere,
sidste_tilskuer_antal,
mean_tilskuer_scoring,
mean_temp_6h,
mean_precip_6h,
mean_precip_dur_6h,
mean_wind_speed_6h
) # y-variable + 15 + tidspunktskategori, lokalopgør, afstand
# Tilføj lokalopgør baseret på afstand, og smider det ind i en dataframe.
# Afstanden er ca. afrundet afstand taget fra google maps
afstande <- data.frame(
klub = c("FCM", "SIF", "RFC", "AGF", "AaB", "BIF", "FCK", "FCN", "ACH", "SJF", "VB", "OB", "HOB", "EFB", "LBK", "HIF", "FCV"),
afstand_km = c(40, 50, 60, 80, 90, 200, 220, 240, 230, 150, 120, 130, 65, 175, 240, 150, 95)
)
samlet_data_afstand <- samlet_data_flot |>
left_join(afstande, by = c("ude" = "klub")) |>
mutate(
lokalt_opgoer = ifelse(afstand_km <= 85, 1, 0)
) |>
relocate(afstand_km, lokalt_opgoer, .after = ude)  # Flyt 'lokalt_opgoer' efter 'ude'
# Tilføj en ny kolonne 'tidspunktskategori'
samlet_data_flot <- samlet_data_afstand |>
mutate(
tidspunktskategori = case_when(
as.numeric(substr(kampstart, 1, 2)) < 15 ~ "Middag",
as.numeric(substr(kampstart, 1, 2)) < 18 ~ "Eftermiddag",
TRUE ~ "Aften"
)
) |>
relocate(
tidspunktskategori, .after = dag_type
)
samlet_data_flot <- samlet_data_flot |>
mutate(
kampstart = parse_time(sprintf("%02d:%02d", hour(kampstart), minute(kampstart)))
)
View(samlet_data_flot)
samlet_data_flot <- samlet_data |>
filter(
kampstart >= tid & kampstart - hours(6) <= tid
) |>
group_by(dato) |>
mutate(
mean_temp_6h = round(mean(temp_mean_past1h), 1),
mean_precip_6h = round(mean(precip_past1h), 1),
mean_precip_dur_6h = round(mean(precip_dur_past1h), 1),
mean_wind_speed_6h = round(mean(wind_speed_past1h), 1),
dag_type = ifelse(ugedag %in% c("lørdag", "søndag"), "Weekend", "Hverdag"),
mean_tilskuer_scoring = round((mean_tilskuere / overall_mean_tilskuere), 1)
) |>
slice_head() |>
ungroup() |>
select(dato,
kampstart,
ugedag,
dag_type,
runde,
ude,
spild,
mean_spild,
sidste_spild,
mean_afhentningsgrad,
mean_tilskuere,
sidste_tilskuer_antal,
mean_tilskuer_scoring,
mean_temp_6h,
mean_precip_6h,
mean_precip_dur_6h,
mean_wind_speed_6h
) # y-variable + 15 + tidspunktskategori, lokalopgør, afstand
# Tilføj lokalopgør baseret på afstand, og smider det ind i en dataframe.
# Afstanden er ca. afrundet afstand taget fra google maps
afstande <- data.frame(
klub = c("FCM", "SIF", "RFC", "AGF", "AaB", "BIF", "FCK", "FCN", "ACH", "SJF", "VB", "OB", "HOB", "EFB", "LBK", "HIF", "FCV"),
afstand_km = c(40, 50, 60, 80, 90, 200, 220, 240, 230, 150, 120, 130, 65, 175, 240, 150, 95)
)
samlet_data_afstand <- samlet_data_flot |>
left_join(afstande, by = c("ude" = "klub")) |>
mutate(
lokalt_opgoer = ifelse(afstand_km <= 85, 1, 0)
) |>
relocate(afstand_km, lokalt_opgoer, .after = ude)  # Flyt 'lokalt_opgoer' efter 'ude'
# Tilføj lokalopgør baseret på afstand, og smider det ind i en dataframe.
# Afstanden er ca. afrundet afstand taget fra google maps
afstande <- data.frame(
klub = c("FCM", "SIF", "RFC", "AGF", "AaB", "BIF", "FCK", "FCN", "ACH", "SJF", "VB", "OB", "HOB", "EFB", "LBK", "HIF", "FCV"),
afstand_km = c(40, 50, 60, 80, 90, 200, 220, 240, 230, 150, 120, 130, 65, 175, 240, 150, 95)
)
samlet_data_afstand <- samlet_data_flot |>
left_join(afstande, by = c("ude" = "klub")) |>
mutate(
lokalt_opgoer = ifelse(afstand_km <= 85, 1, 0)
) |>
relocate(afstand_km, lokalt_opgoer, .after = ude)  # Flyt 'lokalt_opgoer' efter 'ude'
connection <- dbConnect(SQLite(), "vff.db")
# Få rettet query når alle tabeller er klar
samlet_sql_query <- dbGetQuery(connection,
"select vff.dato, vff.ugedag, vff.ude, vff.antal_spild, vff.mean_spild, vff.sidste_spild, vff.mean_afhentningsgrad,
superstats.kampstart, superstats.runde, superstats.mean_tilskuere, superstats.sidste_tilskuer_antal,
dmi.tid, dmi.temp_mean_past1h, dmi.precip_dur_past1h, dmi.precip_past1h, dmi.wind_speed_past1h
from vff
left join superstats ON vff.dato = superstats.dato
left join dmi ON vff.dato = dmi.dato
where dmi.temp_mean_past1h is not NULL")
dbDisconnect(connection)
samlet_data <- as_tibble(samlet_sql_query) |>
mutate(
dato = as.Date(dato, origin = "1970-01-01"),
kampstart = hms(parse_time(kampstart)),
tid = hms(parse_time(tid))
)
overall_mean_tilskuere <- mean(superstats$tilskuere) # = 5401
samlet_data_flot <- samlet_data |>
filter(
kampstart >= tid & kampstart - hours(6) <= tid
) |>
group_by(dato) |>
mutate(
mean_temp_6h = round(mean(temp_mean_past1h), 1),
mean_precip_6h = round(mean(precip_past1h), 1),
mean_precip_dur_6h = round(mean(precip_dur_past1h), 1),
mean_wind_speed_6h = round(mean(wind_speed_past1h), 1),
dag_type = ifelse(ugedag %in% c("lørdag", "søndag"), "Weekend", "Hverdag"),
mean_tilskuer_scoring = round((mean_tilskuere / overall_mean_tilskuere), 1)
) |>
slice_head() |>
ungroup() |>
select(dato,
kampstart,
ugedag,
dag_type,
runde,
ude,
spild,
mean_spild,
sidste_spild,
mean_afhentningsgrad,
mean_tilskuere,
sidste_tilskuer_antal,
mean_tilskuer_scoring,
mean_temp_6h,
mean_precip_6h,
mean_precip_dur_6h,
mean_wind_speed_6h
) # y-variable + 15 + tidspunktskategori, lokalopgør, afstand
samlet_data_flot <- samlet_data |>
filter(
kampstart >= tid & kampstart - hours(6) <= tid
) |>
group_by(dato) |>
mutate(
mean_temp_6h = round(mean(temp_mean_past1h), 1),
mean_precip_6h = round(mean(precip_past1h), 1),
mean_precip_dur_6h = round(mean(precip_dur_past1h), 1),
mean_wind_speed_6h = round(mean(wind_speed_past1h), 1),
dag_type = ifelse(ugedag %in% c("lørdag", "søndag"), "Weekend", "Hverdag"),
mean_tilskuer_scoring = round((mean_tilskuere / overall_mean_tilskuere), 1)
) |>
slice_head() |>
ungroup() |>
select(dato,
kampstart,
ugedag,
dag_type,
runde,
ude,
antal_spild,
mean_spild,
sidste_spild,
mean_afhentningsgrad,
mean_tilskuere,
sidste_tilskuer_antal,
mean_tilskuer_scoring,
mean_temp_6h,
mean_precip_6h,
mean_precip_dur_6h,
mean_wind_speed_6h
) # y-variable + 15 + tidspunktskategori, lokalopgør, afstand
# Tilføj lokalopgør baseret på afstand, og smider det ind i en dataframe.
# Afstanden er ca. afrundet afstand taget fra google maps
afstande <- data.frame(
klub = c("FCM", "SIF", "RFC", "AGF", "AaB", "BIF", "FCK", "FCN", "ACH", "SJF", "VB", "OB", "HOB", "EFB", "LBK", "HIF", "FCV"),
afstand_km = c(40, 50, 60, 80, 90, 200, 220, 240, 230, 150, 120, 130, 65, 175, 240, 150, 95)
)
samlet_data_afstand <- samlet_data_flot |>
left_join(afstande, by = c("ude" = "klub")) |>
mutate(
lokalt_opgoer = ifelse(afstand_km <= 85, 1, 0)
) |>
relocate(afstand_km, lokalt_opgoer, .after = ude)  # Flyt 'lokalt_opgoer' efter 'ude'
# Tilføj en ny kolonne 'tidspunktskategori'
samlet_data_flot <- samlet_data_afstand |>
mutate(
tidspunktskategori = case_when(
as.numeric(substr(kampstart, 1, 2)) < 15 ~ "Middag",
as.numeric(substr(kampstart, 1, 2)) < 18 ~ "Eftermiddag",
TRUE ~ "Aften"
)
) |>
relocate(
tidspunktskategori, .after = dag_type
)
samlet_data_flot <- samlet_data_flot |>
mutate(
kampstart = parse_time(sprintf("%02d:%02d", hour(kampstart), minute(kampstart)))
)
View(samlet_data_flot)
file.create("machine_learning_1eksamen.R")
# Udtræk kun de numeriske kolonner
numeriske_variabler <- samlet_data_flot[, sapply(samlet_data_flot, is.numeric)]
# Opret en korrelationsmatrix
cor_matrix <- cor(numeriske_variabler)
library(corrplot)
# Opret et varmekortgraf
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 100)
View(samlet_data_flot)
samlet_data_flot <- samlet_data |>
filter(
kampstart >= tid & kampstart - hours(6) <= tid
) |>
group_by(dato) |>
mutate(
mean_temp_6h = round(mean(temp_mean_past1h), 1),
mean_precip_6h = round(mean(precip_past1h, na.rm = TRUE), 1),
mean_precip_dur_6h = round(mean(precip_dur_past1h), 1),
mean_wind_speed_6h = round(mean(wind_speed_past1h), 1),
dag_type = ifelse(ugedag %in% c("lørdag", "søndag"), "Weekend", "Hverdag"),
mean_tilskuer_scoring = round((mean_tilskuere / overall_mean_tilskuere), 1)
) |>
slice_head() |>
ungroup() |>
select(dato,
kampstart,
ugedag,
dag_type,
runde,
ude,
antal_spild,
mean_spild,
sidste_spild,
mean_afhentningsgrad,
mean_tilskuere,
sidste_tilskuer_antal,
mean_tilskuer_scoring,
mean_temp_6h,
mean_precip_6h,
mean_precip_dur_6h,
mean_wind_speed_6h
) # y-variable + 15 + tidspunktskategori, lokalopgør, afstand
View(samlet_data_flot)
samlet_data_flot <- samlet_data |>
filter(
kampstart >= tid & kampstart - hours(6) <= tid
) |>
group_by(dato) |>
mutate(
mean_temp_6h = round(mean(temp_mean_past1h), 1),
mean_precip_6h = round(mean(precip_past1h, na.rm = TRUE), 1),
mean_precip_dur_6h = round(mean(precip_dur_past1h, na.rm = TRUE), 1),
mean_wind_speed_6h = round(mean(wind_speed_past1h), 1),
dag_type = ifelse(ugedag %in% c("lørdag", "søndag"), "Weekend", "Hverdag"),
mean_tilskuer_scoring = round((mean_tilskuere / overall_mean_tilskuere), 1)
) |>
slice_head() |>
ungroup() |>
select(dato,
kampstart,
ugedag,
dag_type,
runde,
ude,
antal_spild,
mean_spild,
sidste_spild,
mean_afhentningsgrad,
mean_tilskuere,
sidste_tilskuer_antal,
mean_tilskuer_scoring,
mean_temp_6h,
mean_precip_6h,
mean_precip_dur_6h,
mean_wind_speed_6h
) # y-variable + 15 + tidspunktskategori, lokalopgør, afstand
# Tilføj lokalopgør baseret på afstand, og smider det ind i en dataframe.
# Afstanden er ca. afrundet afstand taget fra google maps
afstande <- data.frame(
klub = c("FCM", "SIF", "RFC", "AGF", "AaB", "BIF", "FCK", "FCN", "ACH", "SJF", "VB", "OB", "HOB", "EFB", "LBK", "HIF", "FCV"),
afstand_km = c(40, 50, 60, 80, 90, 200, 220, 240, 230, 150, 120, 130, 65, 175, 240, 150, 95)
)
samlet_data_afstand <- samlet_data_flot |>
left_join(afstande, by = c("ude" = "klub")) |>
mutate(
lokalt_opgoer = ifelse(afstand_km <= 85, 1, 0)
) |>
relocate(afstand_km, lokalt_opgoer, .after = ude)  # Flyt 'lokalt_opgoer' efter 'ude'
# Tilføj en ny kolonne 'tidspunktskategori'
samlet_data_flot <- samlet_data_afstand |>
mutate(
tidspunktskategori = case_when(
as.numeric(substr(kampstart, 1, 2)) < 15 ~ "Middag",
as.numeric(substr(kampstart, 1, 2)) < 18 ~ "Eftermiddag",
TRUE ~ "Aften"
)
) |>
relocate(
tidspunktskategori, .after = dag_type
)
samlet_data_flot <- samlet_data_flot |>
mutate(
kampstart = parse_time(sprintf("%02d:%02d", hour(kampstart), minute(kampstart)))
)
View(samlet_data_flot)
# Udtræk kun de numeriske kolonner
numeriske_variabler <- samlet_data_flot[, sapply(samlet_data_flot, is.numeric)]
# Opret en korrelationsmatrix
cor_matrix <- cor(numeriske_variabler)
# Opret et varmekortgraf
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 100)
any(is.na(corr)) # Tjekker for NA
any(is.na(cor_matrix)) # Tjekker for NA
cor_matrix
cor_matrix[is.na(cor_matrix)] <- 0
cor_matrix
# Opret et varmekortgraf
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 100)
pairs(numeriske_variabler)
# Opret et varmekortgraf
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 100)
